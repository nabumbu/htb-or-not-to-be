#!/bin/bash
###
# flags: -l (active, retired), 
#-i (machine info: with ), -s (sort: id,Difficulty, Name, OS)
#
#
##



#https://www.hackthebox.eu/api/v4/machine/own


#echo "Path: ${BASH_SOURCE[0]}"
readonly real_path=$(realpath $0)
readonly script_location=$(dirname "$real_path")
readonly target="https://www.hackthebox.eu/"
endpoint=""

readonly FILE_ACTIVE_MACHINES="$script_location/active_machines.json"
readonly FILE_RETIRED_MACHINES="$script_location/retired_machines.json"

trap ctrl_c INT

function ctrl_c() {
    echo "** Trapped CTRL-C"
    exit 1    
}

function show_banner(){
    figlet -w 100 HTB or NOT to BE
}

function get_machines() {

case $1 in
    active)
        endpoint="api/v4/machine/list"
        output="active_machines.json"
        ;;
    retired)
        endpoint="api/v4/machine/list/retired"
	    output="retired_machines.json"
        ;;
    *)
        ;;
esac


if [ -n $endpoint ]
then
    echo $target$endpoint
    machine_data=$(curl -s -H "Authorization: Bearer $ACCESS_TOKEN" -H "Accept: application/json" $target$endpoint -X GET -L )
else
    echo "not valid option"
fi



}

function print_list(){

    if [ $sort ]
    then

        case $sort in
            id) key="id";;
            level) key="level";;
            name) key="name";;
            os) key="os";;
            *) key="id";;
        esac

        if [ $sort == "level" ]    
        then
            echo $1 | jq ' .info[] 
| select(.difficultyText=="Easy").level |= 0
| select(.difficultyText=="Medium").level |= 1 
| select(.difficultyText=="Hard").level |= 2
| select(.difficultyText=="Insane").level |= 3
| "\(.id) \(.name) \(.difficultyText) \(.ip) \(.os) \(.authUserInRootOwns) \(.level)"' | sed -e 's/^"//' -e 's/"$//' | sort -k 7 | awk 'BEGIN { printf ("%s \t %8s \t %8s \t %8s \t %8s \t %8s \n", "ID" ,"Name", "Difficulty", "IP" , "OS", "authUserInRootOwns")} { printf("%s \t %8s \t %8s \t %8s \t %8s \t %8s \n", $1, $2, $3, $4, $5, $6) }'
        else
        echo $1 | jq '.info | sort_by(.'$key') [] | "\(.id) \(.name) \(.difficultyText) \(.ip) \(.os) \(.authUserInRootOwns)"' | sed -e 's/^"//' -e 's/"$//' | awk 'BEGIN { printf ("%s \t %8s \t %8s \t %8s \t %8s \t %8s \n", "ID" ,"Name", "Difficulty", "IP" , "OS", "authUserInRootOwns")} { printf("%s \t %8s \t %8s \t %8s \t %8s \t %8s \n", $1, $2, $3, $4, $5, $6) }'
        fi
    elif [ $os ]
    then
        echo "$os"
        echo $1 | jq '.info[]|select(.os=="'$os'") | "\(.id) \(.name) \(.difficultyText) \(.ip) \(.os) \(.authUserInRootOwns)"' | sed -e 's/^"//' -e 's/"$//' | awk 'BEGIN { printf ("%s \t %8s \t %8s \t %8s \t %8s \t %8s \n", "ID" ,"Name", "Difficulty", "IP" , "OS", "authUserInRootOwns")} { printf("%s \t %8s \t %8s \t %8s \t %8s \t %8s \n", $1, $2, $3, $4, $5, $6) }'
    else
        echo $1 | jq '.info[]| "\(.id) \(.name) \(.difficultyText) \(.ip) \(.os) \(.authUserInRootOwns)"' | sed -e 's/^"//' -e 's/"$//' | awk 'BEGIN { printf ("%s \t %8s \t %8s \t %8s \t %8s \t %8s \n", "ID" ,"Name", "Difficulty", "IP" , "OS", "authUserInRootOwns")} { printf("%s \t %8s \t %8s \t %8s \t %8s \t %8s \n", $1, $2, $3, $4, $5, $6) }'
    fi
    
    

}

function search_machine_id(){
    
    echo $1

    machine_id=$(echo $active_machines | jq '.info[] | select(.name|ascii_upcase =="'$1'") | (.id)')
    #target_data=$(echo $active_machines | jq '.info[] | select(.name=="'$1'")')
    

    if [ "$machine_id" ]
    then
        echo "$1 is active machine"
    else
        machine_id=$(echo $retired_machines | jq '.info[] | select(.name|ascii_upcase =="'$1'") | (.id)')
        #machine_id=$(echo $machine_data | jq '.info[] | select(.name=="'$1'") | (.id)')
        

        if [ "$machine_id" ]
        then
            echo "$1 is retired machine"
        else
            echo "Machine $1 does not exists"
            exit 1
        fi
    fi

    
}

function play_machine(){
    #https://www.hackthebox.eu/api/v4/machine/play/344
    echo "https://www.hackthebox.eu/api/v4/machine/play/"$1 
    response=$(curl -s -H "Authorization: Bearer $ACCESS_TOKEN" -H "Accept: application/json" https://www.hackthebox.eu/api/v4/machine/play/$1 -X POST -L )
    if [ $? == 0  ];then
        echo $response | jq '.message' | sed -e 's/^"//' -e 's/"$//'
    fi
}

function stop_machine(){
    #https://www.hackthebox.eu/api/v4/machine/play/344
    response=$(curl  -s -H "Authorization: Bearer $ACCESS_TOKEN" -H "Accept: application/json" https://www.hackthebox.eu/api/v4/machine/stop -X POST -L )
    if [ $? == 0  ];then
        echo $response | jq '.message' | sed -e 's/^"//' -e 's/"$//'
        echo -e "ip=\nname=" > ~/.config/bin/htb_machine/data.conf 2>/dev/null
    else
        echo "error web"
    fi
}



function download_data(){
    get_machines active
    echo $machine_data > $FILE_ACTIVE_MACHINES
    get_machines retired
    echo $machine_data > $FILE_RETIRED_MACHINES
}

function htb_login(){
    echo "Introduce your Hackthebox email and password:"
    read  -p 'Enter email: ' email
    read -s -p 'Enter password: ' password
    echo -e "\n"
    ACCESS_TOKEN=""

    LOGIN_RESPONSE=$(curl -s -H "Content-Type: application/json" -d '{"email": "'"$email"'", "password": "'"$password"'"}' -X POST https://www.hackthebox.eu/api/v4/login -L)	
    # | jq -r '.message' | jq -r '.access_token'

    if [[ "$LOGIN_RESPONSE" == *"access_token"* ]]; then
        echo "It's there."
        ACCESS_TOKEN=$( echo $LOGIN_RESPONSE |  jq -r '.message' | jq -r '.access_token')
    else
        #echo -e "\n$LOGIN_RESPONSE" | jq >> tmp.json 
        show_login_err "$LOGIN_RESPONSE"
        #exit 1
    fi

}

function show_login_err(){
if [ "$1" ];then
    if [[ "$1" == *"message"* ]];then
        echo "mensaje"
        get_keys=$(echo $1| jq '.message | keys' 2>/dev/null) 
        if [ $? == 0 ] && [ "$get_keys" ];then
            keys=$(echo $get_keys | jq '.[]')
            for i in ${keys[@]};do
                echo $1 | jq ".message.$i" | jq .[] | sed -e 's/^"//' -e 's/"$//'
            done
        else
                echo $1 | jq '.message' | sed -e 's/^"//' -e 's/"$//'
            exit 1
        fi
    else
        echo "Unexpected error"
        exit 1
    fi

else
    echo "Unexpected error"
    exit 1
fi
}



function dependencies(){
    array=( "figlet" "jp2a")
    for i in "${array[@]}"
    do
        command -v $i >/dev/null 2>&1 || { 
            echo >&2 "$i required"; 
            exit 1; 
        }
    done    
}


function exists(){
    
    array_files=( "$FILE_ACTIVE_MACHINES" "$FILE_RETIRED_MACHINES" )
    FLAG_EXISTS=0
    for i in "${array_files[@]}"
    do
        if [ -f "$i" ]; then
            FLAG_EXISTS=$(expr $FLAG_EXISTS + 1)
        else
            echo "Error: you must download first the data."
            echo "Use the following command: ./htb-or-not-to-be -d "
            exit 1
        fi


    done
    

}


function usage(){
    echo "HELP PANEL"
}

readonly FLAG_POLYBAR_MACHINE=256
readonly FLAG_SUBMIT_FLAG=128
readonly FLAG_INFO=64 
readonly FLAG_LIST=16
readonly FLAG_LIST_SORT=48
readonly FLAG_LIST_OS=18
readonly FLAG_LIST_SORT_OS=50
readonly FLAG_PLAY_MACHINE=8
readonly FLAG_STOP_MACHINE=4
readonly FLAG_DOWNLOAD_DATA=1




function main(){
    
    dependencies
    show_banner
    FLAG_CHECK=0

    while getopts dh:i:l:p:sk:O:f:b: flag
    do
        case "${flag}" in
            d) d=true  && FLAG_CHECK=$(expr $FLAG_CHECK + 1) ;;
            i) info=${OPTARG} && FLAG_CHECK=$(expr $FLAG_CHECK + 64);;
            k) sort=${OPTARG} && FLAG_CHECK=$(expr $FLAG_CHECK + 32);;
            l) list=${OPTARG} && FLAG_CHECK=$(expr $FLAG_CHECK + 16);;
            p) play=${OPTARG} && FLAG_CHECK=$(expr $FLAG_CHECK + 8);;
            s) s=true && FLAG_CHECK=$(expr $FLAG_CHECK + 4);;
            O) os=${OPTARG} && FLAG_CHECK=$(expr $FLAG_CHECK + 2);;
            f) sflag=${OPTARG} && FLAG_CHECK=$(expr $FLAG_CHECK + 128);;
            b) bar=${OPTARG} && FLAG_CHECK=$(expr $FLAG_CHECK + 256)
                if [ $bar == "" ]
                then
                    echo "Stop bar"
                fi
                ;;
            *);;
        esac
    done

    check $FLAG_CHECK

}

function get_machine_info(){
    load_data
    target_data=$(echo $active_machines | jq '.info[] | select(.name|ascii_upcase =="'$1'")')
    if [ "$target_data" ]
    then
        echo "Specified machine found in active machine list"
        url_avatar=$(echo $target_data | jq '.avatar'  | sed -e 's/^"//' -e 's/"$//')
        jp2a $target$url_avatar --colors --chars=+*xo
        echo $target_data | jq ' "\(.id) \(.name) \(.difficultyText) \(.ip) \(.os) \(.authUserInRootOwns) \(.authUserInUserOwns)"' | sed -e 's/^"//' -e 's/"$//' | awk 'BEGIN { printf ("%s \t %8s \t %8s \t %8s \t %8s \t %8s \t %8s \n", "ID" ,"Name", "Difficulty", "IP" , "OS", "Owns root", "Owns user")} { printf("%s \t %8s \t %8s \t %8s \t %8s \t %8s \t %8s \n", $1, $2, $3, $4, $5, $6, $7) }'
    else
        target_data=$(echo $retired_machines | jq '.info[] | select(.name|ascii_upcase=="'$1'")')
        #machine_id=$(echo $machine_data | jq '.info[] | select(.name=="'$1'") | (.id)')
        if [ "$target_data" ]
        then
            echo "Specified machine found in retired machine list"
            url_avatar=$(echo $target_data | jq '.avatar'  | sed -e 's/^"//' -e 's/"$//')
            jp2a $target$url_avatar --colors --chars=+*xo --height=30
            echo $target_data | jq ' "\(.id) \(.name) \(.difficultyText) \(.ip) \(.os) \(.authUserInRootOwns) \(.authUserInUserOwns)"' | sed -e 's/^"//' -e 's/"$//' | awk 'BEGIN { printf ("%s \t %8s \t %8s \t %8s \t %8s \t %8s \t %8s \n", "ID" ,"Name", "Difficulty", "IP" , "OS", "Owns root", "Owns user")} { printf("%s \t %8s \t %8s \t %8s \t %8s \t %8s \t %8s \n", $1, $2, $3, $4, $5, $6, $7) }'
        else
            echo "Specified machine does not exists"
            exit 1
        fi
    fi
}

function load_data(){
    exists
    if [ $FLAG_EXISTS == 2 ]
    then
        retired_machines=$(cat $FILE_RETIRED_MACHINES)
        active_machines=$(cat $FILE_ACTIVE_MACHINES)
    else
        exit 1
    fi
}

function submit_flag(){
    
    # target https://www.hackthebox.eu/api/v4/machine/own'
    # data-raw: flag: flag, id: search_id, difficulty: range 10-100
    
    htb_login
    echo "id: $machine_id"
    echo "Introduce the flag and rate the machine:"
    read  -p 'Enter flag: ' flag_post
    read  -p 'Rate (1-10): ' rate_post
    echo -e "\n"    
    
    echo $rate_post
    rate_post=$(expr $rate_post \* 10)
    echo $rate_post

    response=$(curl -s 'https://www.hackthebox.eu/api/v4/machine/own' \
    -H "authorization: Bearer $ACCESS_TOKEN" \
    -H 'content-type: application/json' \
    --data-raw '{"flag":"'$flag_post'","id":'$machine_id',"difficulty":'$rate_post'}' )

    if [ $? == 0  ];then
        echo "Error: "$(echo $response | jq '.message' | sed -e 's/^"//' -e 's/"$//')
    fi

}

function polybar_machine(){
    load_data
    
    search_machine_ip $(echo "$1" | awk '{print toupper($0)}' )
    ip=$(echo $machine_ip |  sed -e 's/^"//' -e 's/"$//')
    name=$1 
    echo -e "ip=$ip\nname=$name" > ~/.config/bin/htb_machine/data.conf 2>/dev/null
}

function search_machine_ip(){
    
    

    machine_ip="$(echo $active_machines | jq '.info[] | select(.name|ascii_upcase =="'$1'") | (.ip)')"
    #target_data=$(echo $active_machines | jq '.info[] | select(.name=="'$1'")')

    if [ $machine_ip ]
    then
        echo "Found in active machines"
    else
        machine_ip=$(echo $retired_machines | jq '.info[] | select(.name|ascii_upcase =="'$1'") | (.ip)') 

        if [ "$machine_ip" ]
        then
            echo "Found in retired machines"
        else
            #echo "Machine $1 does not exist"
            echo "Machine not found"
            exit 1
        fi
    fi

    
}
function check(){
    case $1 in
        $FLAG_INFO) 
            load_data
            info=$(echo "$info" | awk '{print toupper($0)}' )
            get_machine_info $info
            
            ;;
        $FLAG_LIST)    
            load_data
            if [ $list == "active" ]; then
                print_list  $active_machines
            elif [ $list == "retired" ]; then
                print_list  $retired_machines
            else
                echo "Error"
                exit 1
            fi
            ;;
        $FLAG_LIST_SORT)   
            #echo "Get machines and sort: not available yet" 
            load_data
            if [ $list == "active" ]; then
                print_list  $active_machines
            elif [ $list == "retired" ]; then
                print_list  $retired_machines
            else
                echo "Error"
                exit 1
            fi            
            ;;
        $FLAG_LIST_OS) 
            #echo "Get machines and select OS: not available yet" 
            load_data
            if [ $list == "active" ]; then
                print_list  $active_machines
            elif [ $list == "retired" ]; then
                print_list  $retired_machines
            else
                echo "Error"
                exit 1
            fi
            ;;
        $FLAG_LIST_SORT_OS) 
            echo "Get machines, select OS and sort: not available yet" 
            ;;
        $FLAG_PLAY_MACHINE) 
            load_data
            play=$(echo "$play" | awk '{print toupper($0)}' )
            search_machine_id $play
            if [ "$machine_id" ]; then
                htb_login
                if [ "$ACCESS_TOKEN" ]; then
                    play_machine $machine_id
                fi
            fi
            ;;  
        $FLAG_STOP_MACHINE)     
            htb_login
            if [ "$ACCESS_TOKEN" ]; then
                stop_machine
            fi
            ;;
        $FLAG_DOWNLOAD_DATA) 
            echo "DOWNLOAD DATA:" 
            htb_login
            if [ $ACCESS_TOKEN ]; then
                echo "Updating machine lists..."
                download_data
            fi
            ;;
        $FLAG_SUBMIT_FLAG)
            load_data
            sflag=$(echo "$sflag" | awk '{print toupper($0)}' )
            search_machine_id $sflag
            submit_flag $machine_id
            ;;
        $FLAG_POLYBAR_MACHINE)
            polybar_machine $bar
            ;;
        *)
            usage
            exit 1 
            ;;
    esac
}

main "$@"